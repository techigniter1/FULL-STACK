1. Setup
mkdir practice2-backend
cd practice2-backend
npm init -y
npm install express jsonwebtoken body-parser

2. Create server.js
const express = require('express');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = 5000;

app.use(bodyParser.json());

// Secret key for JWT
const JWT_SECRET = 'banksecretkey';

// Hardcoded user data (for demo purposes)
let user = {
    username: 'user1',
    password: 'pass123',
    balance: 1000
};

// ---------------- JWT Middleware ----------------
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) return res.status(401).json({ message: 'Access token missing' });

    jwt.verify(token, JWT_SECRET, (err, userData) => {
        if (err) return res.status(403).json({ message: 'Invalid token' });
        req.user = userData; // attach decoded data
        next();
    });
}

// ---------------- Routes ----------------

// Login route - issues JWT
app.post('/login', (req, res) => {
    const { username, password } = req.body;

    if (username === user.username && password === user.password) {
        const token = jwt.sign({ username: user.username }, JWT_SECRET, { expiresIn: '1h' });
        res.json({ message: 'Login successful', token });
    } else {
        res.status(401).json({ message: 'Invalid credentials' });
    }
});

// Get balance - protected
app.get('/balance', authenticateToken, (req, res) => {
    res.json({ balance: user.balance });
});

// Deposit - protected
app.post('/deposit', authenticateToken, (req, res) => {
    const { amount } = req.body;
    if (amount <= 0) return res.status(400).json({ message: 'Invalid deposit amount' });

    user.balance += amount;
    res.json({ message: `Deposited $${amount}`, balance: user.balance });
});

// Withdraw - protected
app.post('/withdraw', authenticateToken, (req, res) => {
    const { amount } = req.body;
    if (amount <= 0) return res.status(400).json({ message: 'Invalid withdrawal amount' });

    if (amount > user.balance) return res.status(400).json({ message: 'Insufficient balance' });

    user.balance -= amount;
    res.json({ message: `Withdrew $${amount}`, balance: user.balance });
});

// Start server
app.listen(PORT, () => {
    console.log(`Banking API server running at http://localhost:${PORT}`);
});

3. How to Test
1. Login to get JWT
curl -X POST http://localhost:5000/login \
-H "Content-Type: application/json" \
-d '{"username":"user1","password":"pass123"}'


Response:

{
  "message": "Login successful",
  "token": "<JWT_TOKEN>"
}

2. Check Balance
curl http://localhost:5000/balance \
-H "Authorization: Bearer <JWT_TOKEN>"

3. Deposit Money
curl -X POST http://localhost:5000/deposit \
-H "Authorization: Bearer <JWT_TOKEN>" \
-H "Content-Type: application/json" \
-d '{"amount":200}'

4. Withdraw Money
curl -X POST http://localhost:5000/withdraw \
-H "Authorization: Bearer <JWT_TOKEN>" \
-H "Content-Type: application/json" \
-d '{"amount":500}'
